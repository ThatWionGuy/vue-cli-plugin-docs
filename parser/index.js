const { resolve } = require('path');
const {
    chalk,
    log,
    logWithSpinner,
    stopSpinner
} = require('@vue/cli-shared-utils');
const { writeFile, appendFile, readdir, readFile, stat } = require('fs').promises;;

/**
 * Function to tell us if the file or folder has the .vue extension.
 * @param {string} item 
 */
const isVueFile = item => /\.vue?$/i.test(item)
/**
 * Function to tell us if the folded is the node modules folder.
 * We want to ignore this folder in our searches.
 * @param {string} item 
 */
const isNodeModules = item => /node_modules?$/i.test(item);
/**
 * Function to parse out the <docs></docs> section of the file.
 * @param {string} content 
 */
const getDocsSection = content => {
    let matches = /<docs>(.|\s|\S)*<\/docs>/im.exec(content);
    if (matches && matches.length > 0) {
        return matches[0].replace('<docs>', '').replace('</docs>', '');
    }
    return null;
}

/**
 * Function to recursively find all .vue files in the directory.
 * @param {string} dir 
 */
async function* getVueFiles(dir) {
    const items = await readdir(dir, { withFileTypes: true });
    for (const item of items) {
        const res = resolve(dir, item.name);
        if (item.isDirectory() && !isNodeModules(item.name)) {
            yield * getVueFiles(res);
        } else if (isVueFile(res)) {
            yield res;
        } else {
            continue;
        }
    }

}

const generatorComments = `<!--- 
    This file was generated by vue-cli-plugin-docs using <docs></docs> section in the component files.
    Any manual changes to this file will be wiped out on the next npm run build.
    To change the readme markdown for this file, modify the <docs></docs> section of the vue component(s) 
    that provided the markdown and then run the build again. 
-->
`

async function run(workingDirectory, outputFile) {
    logWithSpinner(chalk.green('Generating documentation...'));

    // Start the output file out with the generator warning, if it does not exist this will create it.
    await writeFile(outputFile, generatorComments);
    let fileContents = '';
    // Go through each .vue file.
    for await (const file of getVueFiles(workingDirectory)) {
        // Get file's contents.
        const contents = await readFile(file);
        // Get it's <docs></docs> section if it exists.
        var docsSection = getDocsSection(contents);
        if (docsSection && docsSection.length > 0) {
            fileContents += docsSection;
        }
    }

    // Add all the docs sections to the output file.
    await appendFile(outputFile, fileContents);
    let savedPath = outputFile;
    if (savedPath.indexOf(workingDirectory) == 0) {
        savedPath = savedPath.substring(workingDirectory.length);
    }
    let summaryHeader = 'File';
    while (summaryHeader.length < savedPath.length + 2) {
        summaryHeader += ' ';
    }
    summaryHeader += 'Size';

    const stats = await stat(outputFile);
    let fileSize = stats["size"] / 1000.0;

    let summaryFile = savedPath + '  ' + fileSize + ' KiB';

    stopSpinner()
    log();
    log(chalk.green(`Documentation generated successfully`));
    log();
    log(chalk.cyan(summaryHeader));
    log();
    log(chalk.blue(summaryFile));
}

module.exports = {
    run
}