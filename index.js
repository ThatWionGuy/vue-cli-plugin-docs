const { resolve } = require('path');
// fs methods have to be Sync versions as the build function is Sync.
const { writeFileSync, appendFileSync, readdirSync, readFileSync } = require('fs');

/**
 * Function to tell us if the file or folder has the .vue extension.
 * @param {string} item 
 */
const isVueFile = item => /\.vue?$/i.test(item)
/**
 * Function to tell us if the folded is the node modules folder.
 * We want to ignore this folder in our searches.
 * @param {string} item 
 */
const isNodeModules = item => /node_modules?$/i.test(item);
/**
 * Function to parse out the <docs></docs> section of the file.
 * @param {string} content 
 */
const getDocsSection = content => { 
    let matches = /<docs>(.|\s|\S)*<\/docs>/im.exec(content); 
    if (matches && matches.length > 0){
        return matches[0].replace('<docs>', '').replace('</docs>', '');
    }
    return null;
}

/**
 * Function to recursively find all .vue files in the directory.
 * @param {string} dir 
 */
function* getVueFiles(dir) {
    const items = readdirSync(dir, { withFileTypes: true }, );
    for (const item of items) {
        const res = resolve(dir, item.name);
        if (item.isDirectory() && !isNodeModules(item.name)) {
            yield* getVueFiles(res);
        } else if (isVueFile(res)) {
            yield res;
        } else {
            continue;
        }
    }
}

const generatorComments = `<!--- 
    This file was generated by vue-cli-plugin-docs using <docs></docs> section in the component files.
    Any manual changes to this file will be wiped out on the next npm run build.
    To change the readme markdown for this file, modify the <docs></docs> section of the vue component(s) 
    that provided the markdown and then run the build again. 
-->
`

module.exports = (api, options) => {

    const { build } = api.service.commands
    const buildFn = build.fn

    // Configure our working parameters.
    const outputDir = api.getCwd();
    const outputFilename = 'README.md';
    if (options.pluginOptions && options.pluginOptions.docs){
        outputDir = options.pluginOptions.docs.outputDir || outputDir;
        outputFilename = options.pluginOptions.docs.fileName || outputFilename;
    }
    // Resolve the output file name.
    const outputFile = resolve(outputDir, outputFilename);

    build.fn = (...args) => {
        //TODO: Add consol output to indicate what we are doing.

        // Start the output file out with the generator warning, if it does not exist this will create it.
        writeFileSync(outputFile, generatorComments);
        // Go through each .vue file.
        for (const file of getVueFiles(api.getCwd())) {
            // Get file's contents.
            var contents = readFileSync(file);
            // Get it's <docs></docs> section if it exists.
            var docsSection = getDocsSection(contents);
            if (docsSection && docsSection.length > 0){
                // Add the docs section to the output file.
                appendFileSync(outputFile, docsSection);
            }
        }
        // Lastly call the actual build function so that it can complete.
        return buildFn(...args);
        
    }
}